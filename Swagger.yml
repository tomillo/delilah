openapi: 3.0.0
info:
  title: Delilah Resto
  description: Esta API gestionará la información del resto
  version: 1.0.0
servers:
# - url: https://virtserver.swaggerhub.com/josefinabortoletto/delilahRestoAPI/1.0.0
#   description: SwaggerHub API Auto Mocking
- url: http://localhost:3000
  description: Localhost
paths:
  /users:
    get:
      tags:
      - admin
      summary: Obtener todos los usuarios creados
      description: Este endpoint devolverá todos los usuarios existentes en la base
        de datos
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/users'
        "401":
          description: Error al verificar el token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Error en verificar el token'
                    description: 'Error'
        "500":
          description: No existen usuarios creados
      security:
      - jwtAuth: []
    post:
      tags:
      - client
      summary: Crear un nuevo usuario
      description: Crear un nuevo usuario en la base de datos
      requestBody:
        description: Optional description in *Markdown*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "201":
          description: usuario creado
          content:
            aplication/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/users'
        "500":
          description: No pudo crearse el usuario especificado
  /users/{id}:
    get:
      tags:
      - admin
      - client
      summary: Obtener usuario por ID
      description: Obtener usuario ingresado
      parameters:
      - name: id
        in: path
        description: Id del usuario
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
          example: 1234
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        "401":
          description: Error al verificar el token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Error en verificar el token'
                    description: 'Error'
        "500":
          description: Usuario no encontrado
      security:
      - jwtAuth: []
    put:
      tags:
      - admin
      - client
      summary: Modificar un usuario especifico
      description: Modificar un usuario creado en la base de datos
      parameters:
      - name: id
        in: path
        description: Id del usuario
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
          example: 1234
      requestBody:
        description: Contenido a modificar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
      responses:
        "200":
          description: El usuario fue modificado correctamente
        "401":
          description: Error al verificar el token
        "404":
          description: El usuario indicado no existe
      security:
      - jwtAuth: []
  /login:
    post:
      tags:
      - admin
      - client
      summary: Autenticar un usuario
      description: Autenticar los usuarios creados en la base de datos
      parameters:
      - name: Login
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - email
              - password
              properties:
                email:
                  type: string
                  example: 'john@mail.com'
                  description: 'Email'
                password:
                  type: string
                  example: '123'
                  description: 'Password'
        required: true
      responses:
        "200":
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: '1mx6L2L7AMdEsyKy5LW9s8gt6mBxdICwosVn5sjhbwykOoQJFUru6752dwsj2THN'
                    description: 'Token'
        "400":
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Usuario o contraseña incorrecta'
                    description: 'Error'
  /products:
    get:
      tags:
      - admin
      - client
      summary: Obtener todos los productos creados
      description: Este endpoint devolverá todos los productos existentes en la base de datos
      responses:
        "201":
          description: Producto agregado correctamente
        "404":
          description: No existen productos creados
    post:
      tags:
      - admin
      summary: Crear un nuevo producto
      description: Crear un nuevo producto en la base de datos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/products'
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "201":
          description: Producto creado
          content:
            aplication/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/products'
        "500":
          description: No pudo crearse el producto
      security:
      - jwtAuth: []
  /products/{id}:
    get:
      tags:
      - admin
      - client
      summary: Obtener el producto por ID
      description: Obtener el producto indicado
      parameters:
      - name: id
        in: path
        description: Id del producto
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
          example: 1234
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products'
        "500":
          description: Producto no encontrada
    put:
      tags:
      - admin
      summary: Modificar un producto especifico
      description: Modificar un producto creado en la base de datos
      parameters:
      - name: id
        in: path
        description: Id del producto
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
          example: 1234
      requestBody:
        description: Contenido a modificar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/products'
      responses:
        "200":
          description: Producto modificado
        "401":
          description: Error al verificar el token
        "404":
          description: El producto indicado no existe.
      security:
      - jwtAuth: []
  /orders:
    get:
      tags:
      - admin
      - client
      summary: Obtener todos los pedidos creados
      description: Este endpoint devolverá todos los pedidos existentes en la base de datos
      responses:
        "201":
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/orders'
        "500":
          description: No existen pedidos creados
      security:
      - jwtAuth: []
    post:
      tags:
      - client
      summary: Realizar un nuevo pedido
      description: Crear un nuevo pedido en la base de datos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orders'
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "201":
          description: Pedido creado
          content:
            aplication/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/orders'
        "401":
          description: Error al verificar el token
      security:
      - jwtAuth: []
  /orders/{id}:
    get:
      tags:
      - admin
      - client
      summary: Obtener un pedido especificado por ID
      description: Obtener el pedido indicado
      parameters:
      - name: id
        in: path
        description: Id del pedido
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
          example: 1234
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orders'
        "404":
          description: El pedido indicado no existe
      security:
      - jwtAuth: []
    put:
      tags:
      - admin
      summary: Actualizar un pedido especifico
      description: Actualizar un pedido creado en la base de datos
      parameters:
      - name: id
        in: path
        description: Id del pedido
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
          example: 1234
      requestBody:
        description: Contenido a modificar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orders'
      responses:
        "200":
          description: Pedido modificado
        "401":
          description: Error al verificar el token
        "404":
          description: El pedido indicado no existe.
      security:
      - jwtAuth: []
components:
  schemas:
    users:
      required:
      - user
      - name
      - last_name
      - email
      - phone
      - address
      - password
            
      type: object
      properties:
        id:
          type: integer
          example: 1
        user:
          type: string
          example: rfinlangie
        name:
          type: string
          example: Regina
        last_name:
          type: string
          example: Filangie   
        email:
          type: string
          example: regina.filangie@gmail.com
        phone:
          type: number
          example: 5493513222111
        address:
          type: string
          example: Central Perk
        password:
          type: string
          example: rf1123
        date:
          type: string
          format: date
          example: "2019-01-11"
        status:
          type: integer
          example: 1
        role:
          type: integer
          example: 1
    products:
      required:
      - product_name
      - description
      - photo
      - price
      - stock
      - high_date
      - modif_date
      - id_status
      type: object
      properties:
        id:
          type: integer
          example: 1
        product:
          type: string
          example: Hambuerguesa clasica
        description:
          type: string
          example: Hamburguesa casera de carne vacuna, queso cheddar, lechuga y tomate
        photo:
          type: string
          example: https://www.imgProductos.com/1.jpg
        price:
          type: string
          example: "350"
        high_date:
          type: string
          format: date
          example: "2019-01-11"
        modif_date:
          type: string
          format: date
          example: "2019-01-11"
        stock:
          type: number
          example: 3
        id_status:
          type: integer
          example: Activo
    orders:
      type: object
      properties:
        id:
          type: integer
          example: 1
        id_client:
          type: integer
          example: 2
        id_paymenth_method:
          type: integer
          example: 1
        id_order_status:
          type: string
          example: 1
        products:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 6
              id_product:
                type: integer
                example: 12
              quantity:
                type: integer
                example: 2
        order_date:
          type: string
          format: date
          example: "2019-01-11"
        modif_date:
          type: string
          format: date
          example: "2019-01-11"
        total_order:
          type: integer
          example: 350
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
